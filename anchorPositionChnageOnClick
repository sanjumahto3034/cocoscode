var self;
var touchPos;
var rotateImageWithAnchor;
// ----------------------------------->Anchor Scene <--------------------
var ancX;
var ancY;
var minX = 250;
var minY = 250;
var maxX = 450;
var maxY = 450;
var temp = 0;
var ancX = 1;
var ancY = 1;
var midX = 250;
var midY = 250;

var anchorRotateLayer = cc.Layer.extend({
  sprite: null,
  ctor: function () {
    this._super();
    //    cc.view.setDesignResolutionSize(400, 400, cc.ResolutionPolicy.SHOW_ALL);
    var size = cc.winSize;

    var backImage = new cc.Sprite(res.gback);
    backImage.setScale(2, 2);
    backImage.attr({
      x: size.width / 2,
      y: size.height / 2,
    });
    cc.eventManager.addListener(
      {
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        onTouchBegan: this.onTouchBegan,
        onTouchMoved: this.onTouchMoved,
        onTouchEnded: this.onTouchEnded,
      },
      backImage
    );

    this.addChild(backImage, 1);

    rotateImageWithAnchor = new ccui.Button(res.sback);
    rotateImageWithAnchor.setScale(0.26, 0.26);
    rotateImageWithAnchor.setAnchorPoint(0, 0);
    rotateImageWithAnchor.attr({
      x: size.width / 2,
      y: size.height / 2,
    }),
      rotateImageWithAnchor.addTouchEventListener(this.rotateEventBtn);
    rotateImageWithAnchor.addTouchEventListener(this.changeAnchorPoint);

    rotateImageWithAnchor.attr({
      x: size.width / 2,
      y: size.height / 2,
    });
    this.addChild(rotateImageWithAnchor, 2);

    return true;
  },
  changeAnchorPoint: function (sender, type) {
    switch (type) {
      case ccui.Widget.TOUCH_BEGAN:
          touchPos = rotateImageWithAnchor.getTouchBeganPosition();

    if (touchPos.x > midX && touchPos.y > midY) {
      temp = touchPos.x - midX;
      ancX = (temp / 20000) * 100;
      rotateImageWithAnchor.setAnchorPoint(ancX, ancY);
      minX = minX - temp;
      maxX = maxX - temp;

      temp = touchPos.y - midY;
      ancY = (temp / 20000) * 100;
      rotateImageWithAnchor.setAnchorPoint(ancX, ancY);
      minY = minY - temp;
      maxY = maxY - temp;
      console.log("IF CLASS : " + minX);
    } else {
      temp = (touchPos.x - minX) * -1;
      ancX = (temp / 20000) * 100;
      rotateImageWithAnchor.setAnchorPoint(ancX, ancY);
      minX = minX + temp;
      maxX = maxX + temp;
         

      
      temp = (touchPos.y - minY) * -1;
      ancY = (temp / 20000) * 100;
      rotateImageWithAnchor.setAnchorPoint(ancY, ancY);
      minY = minY + temp;
      maxY = maxY + temp;
    }

        break;
    }
    // console.log(ancX);
  },
  rotateEventBtn: function (sender, type) {
    touchPos = rotateImageWithAnchor.getTouchBeganPosition();
    var minX = 300;
    var minY = 300;
    var midX = 400;
    var midY = 400;
    var temp = 0;
    ancX = touchPos.x - minX;
    ancY = touchPos.y - minY;
    ancX = ancX / 2 / 100;
    ancY = ancY / 2 / 100;

    // ancX = ((touchPos.x -maxX / 200) * 100) / 100000;
    // ancY = ((touchPos.x - maxY / 200) * 100) / 100000;

    if (ancX < 1 && ancY < 1) {
      if (ancX > 0 && ancY > 0) {
        console.log(ancX + " : " + ancY);
        rotateImageWithAnchor.setAnchorPoint(ancX, ancY);
        rotateImageWithAnchor.setPosition(400, 400);
        if (touchPos.x < midX && touchPos.y < midY) {
          temp = midX - touchPos.x;
          minX = minX + temp;
          temp = midY - touchPos.y;
          minY = minY + temp;
        } else {
          temp = touchPos.x - midX;
          minX = minX - temp;
          temp = touchPos.y - midY;
          minY = minY - temp;
        }
      }
    }
  },
  // -----------------------------------> Event And Function   <--------------------
  onTouchBegan: function (touch, event) {
    // var targate = event.getCurrentTarget();
    // var self = targate.getParent();
    // var tp = touch.getLocation()
    // ancX = (((tp.x / 480) * 100) / 100);
    // ancY = (((tp.y / 700) * 100) / 100);
    // self.rotateImageWithAnchor.setAnchorPoint(ancX, ancY);
    // self.rotateImageWithAnchor.runAction(cc.rotateBy(1, 360));
    // self.rotateImageWithAnchor.attr({
    //     x: touchPos.x,
    //     y: touchPos.y
    // });
    //   console.log("called");

    return true;
  },
  onTouchMoved: function (touch, event) {
    var targate = event.getCurrentTarget();
    var self = targate.getParent();
    var tp = touch.getLocation();
    targate.setPosition(tp);
  },
});
// ----------------------------------->    Anchor Scene    <--------------------

var scene002Layer = cc.Layer.extend({
  sprite: null,
  coText: null,
  // cordinateText: null,
  ctor: function () {
    this._super();
    var size = cc.winSize;

    var backImage = new cc.Sprite(res.gback);
    this.addChild(backImage, 1);

    self = this;

    this.imageBtn = new cc.Sprite(res.btnbg);
    // this.imageBtn.setAnchorPoint(0.5, 0.5);
    // this.imageBtn._instanceId = 1080;
    this.imageBtn.setTag(3034);
    cc.eventManager.addListener(
      {
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        onTouchBegan: this.onTouchBegan,
        onTouchMoved: this.onTouchMoved,
        onTouchEnded: this.onTouchEnded,
      },
      this.imageBtn
    );
    this.imageBtn.setScale(0.1, 0.1);
    this.imageBtn.attr({
      x: size.width / 2,
      y: size.height / 2,
    });
    this.addChild(this.imageBtn, 2);

    this.coText = "x : 0  -  y : 0";

    this.cordinateText = new cc.LabelTTF(this.coText, "Arial", 25);
    this.cordinateText.attr({
      x: size.width / 2,
      y: size.height / 1.1,
    });
    // this.changeText();
    this.addChild(this.cordinateText, 7);
    return true;
  },
  onTouchBegan: function (touch, event) {
    var targate = event.getCurrentTarget();
    var self = targate.getParent();
    var tp = touch.getLocation();
    var move = cc.moveTo(0.3, tp).easing(cc.easeBackOut());
    // targate.runAction(move);
    self.coText = "x : " + parseInt(tp.x) + "  -  y : " + parseInt(tp.y);
    self.cordinateText.setString(self.coText);
    self.changeText();
    // console.log(targate);
    if (self.imageBtn.getTag() == 3034) {
      console.log(targate);
    }
    return true;
  },
  onTouchMoved: function (touch, event) {
    var targate = event.getCurrentTarget();
    var self = targate.getParent();
    var tp = touch.getLocation();
    targate.setPosition(tp);
    self.coText = "x : " + parseInt(tp.x) + "  -  y : " + parseInt(tp.y);
    self.cordinateText.setString(self.coText);

    return true;
  },
  onTouchEnded: function (touch, event) {
    // console.log("--> Touch End <--");
  },
});

// ---------------------------- > End Test ----------------------------------
var scene001Layer = cc.Layer.extend({
  sprite: null,

  ctor: function () {
    this._super();
    var size = cc.winSize;
    var image = new cc.Sprite(res.gback);
    image.setAnchorPoint(0, 0);
    image.setScale(1, 0.5);
    this.addChild(image, 1);

    var lable = new cc.LabelTTF("Progress bar", "work_flow_font", 45);
    lable.setAnchorPoint(-0.6, -10);
    lable.setScale(1, 1);
    this.addChild(lable, 2);

    var blackBackG = new cc.Sprite(res.blackBack);
    blackBackG.attr({
      x: size.width / 2,
      y: size.height / 4,
    });
    blackBackG.setScale(1, 0.15);
    this.addChild(blackBackG, 5);

    var healthBar = cc.ProgressTimer.create(cc.Sprite.create(res.btnbg));
    healthBar.type = cc.ProgressTimer.TYPE_BAR;
    healthBar.setBarChangeRate(cc.p(1, 0));
    healthBar.setMidpoint(cc.p(0, 0));
    healthBar.attr({
      x: size.width / 2,
      y: size.height / 4,
    });
    healthBar.setScale(0.5, 0.1);
    this.addChild(healthBar, 6);
    var to1 = cc.progressTo(2, 100);

    setTimeout(function () {
      cc.director.runScene(new scene002());
    }, 2000);

    healthBar.runAction(to1);
    return true;
  },
  sceneloadEvenet: function (sender, type) {
    cc.director.runScene(new HelloWorldLayer());
  },
});

var HelloWorldLayer = cc.Layer.extend({
  sprite: null,
  frontMove: true,
  frontValue: 100,
  backMoveEffect: null,
  image: null,
  ctor: function () {
    this._super();

    // cc.director.runScene(new scene002());       // -------> Load Scene
    var size = cc.winSize;
    image = new ccui.Button(res.mainMenuBack);
    image.setAnchorPoint(0.17, 0.3);
    image.setScale(1, 1);

    this.addChild(image);

    var playBtn = new ccui.Button(res.playBtn);
    playBtn.setAnchorPoint(-0.5, -1.5);
    playBtn.addTouchEventListener(this.sceneloadEvenet);
    playBtn.setScale(0.3, 0.3);
    this.addChild(playBtn);

    this.schedule(this.backSceneEffectF, 4);
    this.effectFunction();
    return true;
  },
  effectFunction: function () {
    this.backMoveEffect = cc.moveBy(3, this.frontValue, 1);
    image.runAction(this.backMoveEffect);
  },
  backSceneEffectF: function (dt) {
    if (this.frontMove) {
      this.frontValue = -100;
      this.frontMove = false;
      this.effectFunction();
    } else {
      this.frontMove = true;
      this.frontValue = 100;
      this.effectFunction();
    }
  },
  sceneloadEvenet: function (sender, type) {
    cc.director.runScene(new scene001());
  },
});

var testSceneLayer = cc.Layer.extend({
  sprite: null,
  flipBtn: null,
  isFliped: false,
  i: 0,
  ctor: function () {
    this._super();
    var size = cc.winSize;
    var helloLabel = new cc.LabelTTF("Hello, There", "Arial", 38);
    helloLabel.setColor(cc.color(255, 0, 0, 2));
    helloLabel.x = size.width / 2;
    helloLabel.y = size.height / 7;
    this.addChild(helloLabel, 5);

    // cc.director.loadscene(HelloWorldScene);

    flipBtn = new ccui.Button(res.nobitaimg);
    flipBtn.setScale(0.3, 0.3);
    flipBtn.x = size.width / 2;
    flipBtn.y = size.height / 2;
    flipBtn.addTouchEventListener(this.flipBtnEvent);
    // this.addChild(flipBtn);
    // flipBtn.runAction(cc.scaleTo(0.7, 0, 0.5));

    var background = new cc.Sprite(res.background);
    // background.size = cc.fit;
    // background.setScale(1, 1);
    background.setScale(0.5, 0.4);
    background.attr({
      x: size.width / 2,
      y: size.height / 2,
    });
    // this.addChild(background);
    // - Splash

    var scrollView = new ccui.ScrollView();
    scrollView.setDirection(ccui.ScrollView.DIR_VERTICAL);
    scrollView.setTouchEnabled(true);
    scrollView.setBounceEnabled(true);
    scrollView.setBackGroundImage(res.gback);
    scrollView.setContentSize(cc.size(400, 400));
    scrollView.setInnerContainerSize(cc.size(400, 400));
    scrollView.setAnchorPoint(cc.p(0.5, 0));
    scrollView.setPosition(cc.p(size.width / 2, size.height / 2));
    scrollView.attr({
      x: size.width / 2,
      y: size.height / 2,
    });
    this.addChild(scrollView);

    var pos = 0.9;
    for (var i = 0; i < 10; i++) {
      var testBtn = new ccui.Button(res.btnbg);
      testBtn.setTouchEnabled(true);
      // testBtn.setAnchorPoint(0.5, 0.5);
      testBtn.setScale(0.2, 0.15);
      testBtn.setPosition(cc.p(scrollView.width / 2, size.height * pos));
      scrollView.addChild(testBtn);
      pos -= 0.1;
    }

    var scrollView1 = new ccui.ScrollView();
    scrollView1.setDirection(ccui.ScrollView.DIR_HORIZONTAL);
    scrollView1.setTouchEnabled(true);
    scrollView1.setBounceEnabled(true);
    scrollView1.setBackGroundImage(res.gback);
    scrollView1.setContentSize(cc.size(400, 100));
    scrollView1.setInnerContainerSize(cc.size(800, 100));
    scrollView1.setAnchorPoint(cc.p(0.5, 1));
    scrollView1.setPosition(cc.p(size.width / 2, size.height / 2));
    scrollView1.attr({
      x: size.width / 2,
      y: size.height / 2,
    });
    // this.addChild(scrollView1);          // --------------------> Horizontal Scroll Bar

    var pos1 = 0.9;
    for (var i = 0; i < 10; i++) {
      var testBtn1 = new ccui.Button(res.btnbg);
      testBtn1.setTouchEnabled(true);
      // testBtn1.setAnchorPoint(0.5, 0.5);
      testBtn1.setScale(0.05, 0.15);
      testBtn1.setPosition(cc.p(scrollView.width * pos1 * 2, size.height / 2));
      scrollView1.addChild(testBtn1);
      pos1 -= 0.1;
    }

    var logo = new ccui.Button(res.HelloWorld_png);
    logo.setScale(0.5, 0.5);
    // logo.setBounceEnabled(true);
    logo.attr({
      x: size.width / 6,
      y: size.height / 1.1,
    });
    this.addChild(logo, 0);

    return true;
  },
  flipBtnEvent: function (sender, type) {
    switch (type) {
      case ccui.Widget.TOUCH_BEGAN:
        var self = sender.getParent();
        var rotate = cc.rotateBy(0.05, 360);
        var rotate = cc.flipX(1, true);
        self.i++;
        console.log("Index : " + self.i);
        if (self.isFliped) {
          self.isFliped = false;
          flipBtn.runAction(cc.scaleTo(0.5, 0, 0.5));
          setTimeout(function () {
            console.log("Hello");
            flipBtn.loadTextures(res.nobitaimg);
            flipBtn.runAction(cc.scaleTo(0.5, 0.5, 0.5));
          }, 700);
        } else {
          self.isFliped = true;
          flipBtn.runAction(cc.scaleTo(0.5, 0, 0.5));
          setTimeout(function () {
            console.log("Hello");
            flipBtn.loadTextures(res.shizukaimg);
            flipBtn.runAction(cc.scaleTo(0.5, 0.5, 0.5));
          }, 700);
        }
        break;
      case ccui.Widget.TOUCH_MOVED:
        break;
    }
  },
});

// ----------------------><> New Scene  <><-------------------------
var scene001 = cc.Scene.extend({
  onEnter: function () {
    this._super();
    var layer001 = new scene001Layer();
    this.addChild(layer001);
  },
});

var scene002 = cc.Scene.extend({
  onEnter: function () {
    this._super();
    var layer002 = new scene002Layer();
    this.addChild(layer002);
  },
});

var anchroRotateScene = cc.Scene.extend({
  onEnter: function () {
    this._super();
    var anchorRotateL = new anchorRotateLayer();
    this.addChild(anchorRotateL);
  },
});

var HelloWorldScene = cc.Scene.extend({
  onEnter: function () {
    this._super();
    var layer = new HelloWorldLayer();
    this.addChild(layer);
  },
});

var testScene = cc.Scene.extend({
  onEnter: function () {
    this._super();
    var layer1 = new testSceneLayer();
    this.addChild(layer1);
  },
});
